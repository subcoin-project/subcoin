searchState.loadedDescShard("subcoin_script", 0, "Bitcoin Script Interpreter\nBare scripts and BIP16 P2SH-wrapped redeemscripts\nSame semantic with <code>bitcoin::ecdsa::Signature</code> with the …\nScript error type.\nErrEvalFalse is returned when the script evaluated without …\nA <code>SignatureChecker</code> implementation that skips all signature …\nEvaluate P2SH subscripts (BIP16).\nPassing a non-strict-DER signature or one with undefined …\nRepresents different signature verification schemes used …\nTrait for verifying Bitcoin transaction signatures.\nError types related to signature verification.\nWitness v1 with 32-byte program, not BIP16 P2SH-wrapped, …\nWitness v1 with 32-byte program, not BIP16 P2SH-wrapped, …\nA <code>SignatureChecker</code> implementation for transactions.\nScript verification flags.\nWitness v0 (P2WPKH and P2WSH); see BIP 141\nGet a flags value with all known bits set.\nAnnex data.\nHash of the annex data\nWhether m_annex_present and m_annex_hash are initialized\nWhether an annex is present\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nChecks an ECDSA signature in the context of a Bitcoin …\nChecks whether the absolute time lock (<code>lock_time</code>) in a …\nThis function verifies that the transaction’s <code>nLockTime</code> …\nChecks a Schnorr signature in the context of a Bitcoin …\nChecks whether the relative time lock (<code>sequence</code>) for a …\nThe lock is satisfied if:\nOpcode position of the last executed OP_CODESEPARATOR (or …\nWhether m_codeseparator_pos is initialized\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nConstructs a new instance of <code>TransactionSignatureChecker</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe hash of the corresponding output\nConstructs a <code>EcdsaSignature</code> from the full sig bytes.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe corresponding hash type.\nThe corresponding hash type.\nThe underlying schnorr signature.\nThe underlying ECDSA Signature.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe tapleaf hash\nWhether m_tapleaf_hash is initialized\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nHow much validation weight is left (decremented for every …\nWhether m_validation_weight_left is initialized\nVerifies an ECDSA signature against a message and public …\nVerifies an ECDSA signature against a message and public …\nVerifies a Schnorr signature against a message and public …\nVerifies a Schnorr signature against a message and public …\nVerifies the script validity.\nTransaction output types\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")