searchState.loadedDescShard("sc_consensus_nakamoto", 0, "Already in the blockchain.\nBlock’s difficulty is invalid.\nA trait for importing Bitcoin blocks.\nBitcoin specific block import implementation.\nSubcoin import queue for processing Bitcoin blocks.\nRepresents the level of block verification.\nA struct responsible for verifying Bitcoin blocks.\nExtended <code>Params</code>.\nAn error occurred in the client.\nConsensus error type.\nFull verification, including verifying the transactions.\nBlock header error.\nVerify the block header only, without the transaction …\nA struct responsible for verifying block header.\nRepresents a batch of Bitcoin blocks that are to be …\nBlock import configuration.\nResult of <code>import_many_blocks</code>.\nResult of the operation of importing a Bitcoin block.\nBlock was imported successfully.\nBlock’s proof-of-work is invalid.\nBlock or parent is known to be bad.\nParent state is missing.\nNo verification performed.\nVerifier used by the Substrate import queue.\nBlock’s timestamp is too old.\nBlock’s timestamp is too far in the future.\nBlock parent is not in the chain.\nCreates a new import queue.\nThe total number of blocks processed.\nRetrieves the results of the block import operations.\nSpecify the block verification level.\nA vector containing the Bitcoin blocks to be imported.\nBlock height at which CSV becomes active.\nWhether to execute the transactions in the block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCheck if the proof-of-work is valid.\nImport a Bitcoin block.\nSends a batch of blocks to the worker of import queue for …\nThe number of blocks imported successfully.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the import status is <code>Self::UnknownParent</code>.\nBitcoin network type.\nConstructs a new instance of <code>BitcoinBlockImporter</code>.\nConstructs a new instance of <code>HeaderVerifier</code>.\nConstructs a new instance of <code>SubstrateImportQueueVerifier</code>.\nConstructs a new instance of <code>ChainParams</code>.\nConstructs a new instance of <code>BlockVerifier</code>.\nThe source from which the blocks were obtained.\nChain params defined in rust-bitcoin.\nThe import results for each block.\nA map of block hashes to script verification flag …\nBlock height at which Segwit becomes active.\nValidates the header and returns the block time, which is …\nPerforms full block verification.\nWhether to verify the Bitcoin script.")