searchState.loadedDescShard("sc_consensus_nakamoto", 0, "Already in the blockchain.\nBlock’s difficulty is invalid.\nBenchmark all supported strategies.\nThis is responsible for benchmarking all kinds of block …\nExecutor for benchmarking the runtime execution with …\nHybrid strategy combining both disk and in-memory runtime …\nA trait for importing Bitcoin blocks.\nBitcoin specific block import implementation.\nRepresents the different strategies for executing a block.\nTrait for executing and importing the block.\nSubcoin import queue for processing Bitcoin blocks.\nRepresents the level of block verification.\nA struct responsible for verifying Bitcoin blocks.\nExtended <code>Params</code>.\nAn error occurred in the client.\nBackend type for the execution client.\nDisk backend.\nConsensus error type.\nRepresents the state backend storage type for block …\nFull verification, including verifying the transactions.\nBlock header error.\nVerify the block header only, without the transaction …\nA struct responsible for verifying block header.\nRepresents a batch of Bitcoin blocks that are to be …\nBlock import configuration.\nResult of <code>import_many_blocks</code>.\nResult of the operation of importing a Bitcoin block.\nBlock was imported successfully.\nIn memory backend.\nBlock’s proof-of-work is invalid.\nBlock or parent is known to be bad.\nParent state is missing.\nNo verification performed.\nBlock executor using custom <code>apply_extrinsics</code>, for the …\nExecutes the block without using the runtime api …\nBlock executor using the runtime api <code>execute_block</code>.\nExecutes the block using the runtime api <code>execute_block</code>,\nVerifier used by the Substrate import queue.\nBlock’s timestamp is too old.\nBlock’s timestamp is too far in the future.\nBlock parent is not in the chain.\nCreates a new import queue.\nThe total number of blocks processed.\nRetrieves the results of the block import operations.\nSpecify the block verification level.\nA vector containing the Bitcoin blocks to be imported.\nBlock height at which CSV becomes active.\nExecutes the given block on top of the state specified by …\nWhether to execute the transactions in the block.\nReturns the type of block execution strategy used.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCheck if the proof-of-work is valid.\nImports the block using the given import params.\nImport a Bitcoin block.\nSends a batch of blocks to the worker of import queue for …\nThe number of blocks imported successfully.\nReturns <code>true</code> if the strategy makes use of the in memory …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether the block should be imported in the …\nDetermines whether the block should be imported in the …\nReturns <code>true</code> if the import status is <code>Self::UnknownParent</code>.\nBitcoin network type.\nConstructs a new instance of <code>RuntimeBlockExecutor</code>.\nConstructs a new instance of <code>OffRuntimeBlockExecutor</code>.\nConstructs a new instance of <code>BenchmarkRuntimeBlockExecutor</code>.\nConstructs a new instance of <code>BenchmarkAllExecutor</code>.\nConstructs a new instance of <code>BitcoinBlockImporter</code>.\nConstructs a new instance of <code>HeaderVerifier</code>.\nConstructs a new instance of <code>SubstrateImportQueueVerifier</code>.\nConstructs a new instance of <code>ChainParams</code>.\nConstructs a new instance of <code>BlockVerifier</code>.\nThe source from which the blocks were obtained.\nChain params defined in rust-bitcoin.\nThe import results for each block.\nA map of block hashes to script verification flag …\nBlock height at which Segwit becomes active.\nSets new block executor.\nValidates the header and returns the block time, which is …\nPerforms full block verification.\nWhether to verify the Bitcoin script.")