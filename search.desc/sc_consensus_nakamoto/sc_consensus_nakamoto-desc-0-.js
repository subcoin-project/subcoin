searchState.loadedDescShard("sc_consensus_nakamoto", 0, "Already in the blockchain.\nBenchmark all supported strategies.\nHybrid strategy combining both disk and in-memory runtime …\nA trait for importing Bitcoin blocks.\nBitcoin specific block import implementation.\nRepresents the different strategies for executing a block.\nTrait for executing and importing the block.\nImport queue for processing Bitcoin blocks.\nRepresents the level of block verification.\nA struct responsible for verifying Bitcoin blocks.\nBackend type for the execution client.\nDisk backend.\nRepresents the state backend storage type for block …\nFull verification, including verifying the transactions.\nVerify the block header only, without the transaction …\nA struct responsible for verifying block header.\nBlock import configuration.\nResult of <code>import_many_blocks</code>.\nResult of the operation of importing a Bitcoin block.\nBlock was imported successfully.\nIn memory backend.\nBlock or parent is known to be bad.\nParent state is missing.\nNo verification performed.\nBlock executor using custom <code>apply_extrinsics</code>, for the …\nExecutes the block without using the runtime api …\nBlock executor using the runtime api <code>execute_block</code>.\nExecutes the block using the runtime api <code>execute_block</code>,\nBlock parent is not in the chain.\nCreates a new import queue.\nThe total number of blocks processed.\nSpecify the block verification level.\nExecutes the given block on top of the state specified by …\nWhether to execute the transactions in the block.\nReturns the type of block execution strategy used.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nImports the block using the given import params.\nImport a Bitcoin block.\nSend blocks to the actual worker of import queue.\nThe number of blocks imported successfully.\nReturns <code>true</code> if the strategy makes use of the in memory …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether the block should be imported in the …\nDetermines whether the block should be imported in the …\nReturns <code>true</code> if the import status is <code>Self::UnknownParent</code>.\nBitcoin network type.\nConstructs a new instance of <code>RuntimeBlockExecutor</code>.\nConstructs a new instance of <code>OffRuntimeBlockExecutor</code>.\nConstructs a new instance of <code>BitcoinBlockImporter</code>.\nConstructs a new instance of <code>HeaderVerifier</code>.\nConstructs a new instance of <code>BlockVerifier</code>.\nThe import results for each block.\nSets new block executor.\nPerforms full block verification.\nValidates the header and returns the block time, which is …\nWhether to verify the Bitcoin script.")