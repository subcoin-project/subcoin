searchState.loadedDescShard("sc_consensus_nakamoto", 0, "Already in the blockchain.\nA trait for importing Bitcoin blocks.\nBitcoin specific block import implementation.\nRepresents the level of block verification.\nFull verification, including verifying the transactions.\nVerify the block header only, without the transaction â€¦\nResult of the operation of importing a Bitcoin block.\nBlock was imported successfully.\nBlock or parent is known to be bad.\nParent state is missing.\nNo verification performed.\nBlock parent is not in the chain.\nSpecify the block verification level.\nWhether to execute the transactions in the block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nImport a Bitcoin block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the import status is <code>Self::UnknownParent</code>.\nBitcoin network type.\nConstructs a new instance of <code>BitcoinBlockImporter</code>.")