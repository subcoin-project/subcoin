searchState.loadedDescShard("subcoin_primitives", 0, "Primitives for the client.\nTrait for interfacing with the Bitcoin storage.\nTrait for converting between Substrate extrinsics and …\nRepresents a Bitcoin block locator, used to sync …\nA trait for retrieving block locators.\nBlock metadata for BIP68 validation.\n6 blocks is the standard confirmation period in the …\nA trait to extend the Substrate Client.\nDeals with the storage key for UTXO in the state.\nError type of Subcoin header.\nRepresents an indexed Bitcoin block, identified by its …\nThe maximum allowed weight for a block, see BIP 141 …\nNumber of blocks for median time calculation (BIP113).\nMarker height for coins that exist only in the mempool.\nDummy implementor of <code>TransactionIndex</code>.\nUTXO coin with metadata for mempool validation.\nInterface for retriving the position of given transaction …\nRepresents the index of a transaction.\nReturns the number of best block.\nReturns <code>Some(BlockHash)</code> if a corresponding Bitcoin block …\nReturns the encoded Bitcoin genesis block.\nConverts a Bitcoin transaction into a Substrate extrinsic.\nWhether the specified Bitcoin block exists in the system.\nReturns the bitcoin block hash for given block number.\nReturns the header for given bitcoin block hash.\nRetrieve a block locator from given height.\nReturns the number for given bitcoin block hash.\nNumber of the block including the transaction.\nCalculate median time past for a given block (BIP113).\nConverts a Substrate block to a Bitcoin block.\nExtracts the Bitcoin block hash from the given Substrate …\nExtracts the Bitcoin block header from the given Substrate …\nConverts Substrate extrinsic to Bitcoin transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet block metadata (height and median time past) for a …\nBlock hash.\nBlock height where this coin was created (MEMPOOL_HEIGHT …\nBlock height.\nPosition of the transaction within the block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a block is on the active (best) chain.\nWhether this coin is from a coinbase transaction.\nThe latest block number.\nA vector of block hashes, starting from the latest block …\nMedian Time Past of the block containing this coin (for …\nMedian Time Past of this block.\nBlock number.\nThe transaction output.\nReturns the encoded Bitcoin genesis block.\nReturns the storage key for the given output specified by …\nReturns the final storage prefix for Coins.\nReturns <code>Some(Block::Hash)</code> if a corresponding Substrate …\nConstructs a Substrate header digest from a Bitcoin header.\nReturns the position of given transaction ID if any.\nBitcoin transaction pool abstraction for network …\nTransaction validation error.\nBasic checks that don’t depend on any context.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nTransaction accepted into mempool.\nTransaction already in mempool.\nAncestor/descendant size limits.\nCoinbase transaction not allowed in mempool.\nFee rate too low for relay.\nHard rejection - penalize peer for protocol violation.\nHard rejections - indicate protocol violations or …\nMempool is full.\nMissing parent transactions (might arrive later).\nFee calculation errors.\nRBF-related issues.\nNo-op transaction pool for backward compatibility.\nTransaction is non-final.\nTransaction is non-standard.\nPackage relay issues.\nTransaction rejected.\nClassification of rejection reasons for peer penalty …\nScript validation failed.\nSoft rejection - don’t penalize peer.\nSoft rejections - legitimate reasons that don’t indicate …\nToo many ancestor/descendant transactions.\nToo many signature operations.\nTransaction conflicts with mempool.\nOther validation errors.\nBitcoin transaction pool trait for network integration.\nMempool statistics.\nResult of transaction validation.\nTotal virtual size of all transactions.\nCheck if transaction is already in mempool.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet transaction from mempool if present.\nGet mempool statistics.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over all transaction IDs with their fee rates. …\nMark transactions as broadcast to peers.\nCurrent minimum relay fee rate in sat/kvB.\nGet transactions pending broadcast to peers. Returns …\nReturns true if the peer should be penalized for this …\nNumber of transactions in mempool.\nTotal fees of all transactions.\nValidate and potentially accept a transaction into the …\nFee rate in sat/kvB for relay decisions.")