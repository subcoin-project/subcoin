searchState.loadedDescShard("subcoin_mempool", 0, "Bitcoin Mempool Overview\nIncluded in a block.\nIn-memory UTXO cache with Substrate runtime backend.\nConflicted with another transaction.\nSet of transactions being replaced by RBF.\nHandle to entry in mempool arena (not an iterator).\nExpired (too old).\nFee rate in satoshis per virtual kilobyte.\nLock points for BIP68/BIP112 validation.\nThread-safe Bitcoin mempool.\nArena holding all mempool entries with multi-index support.\nInner mempool state (protected by RwLock in main MemPool).\nConfiguration options for the transaction memory pool.\nErrors that can occur when validating or managing mempool …\nA package of related transactions to be validated together.\nPackage validation result.\nReason for removing transactions from mempool.\nChain reorganization.\nReplaced by higher-fee transaction (RBF).\nEvicted due to mempool size limit.\nMempool entry with cached ancestor/descendant state.\nResult of transaction pre-validation.\nAccept a package of related transactions (CPFP support).\nAccept a single transaction into the mempool.\nAdd coins from mempool transaction to overlay.\nAll affected (conflicts + descendants).\nGet ancestor feerate.\nSet of ancestor entry IDs in mempool.\nGet the fee rate in satoshis per kilovirtual byte.\nBase fee paid by transaction.\nGet the current best block hash.\nCreate a builder for configuring mempool options\nGet statistics about the cache.\nCached ancestor score key for efficient reindexing.\nCached descendant score key for efficient reindexing.\nCalculate ancestors of a transaction (recursively).\nCalculate descendants of a transaction (recursively).\nChild entries (in-mempool dependents).\nGet reference to the client.\nSet of conflicting transaction IDs.\nCheck if transaction exists in mempool by txid.\nCheck if transaction exists in mempool.\nCheck if transaction exists in mempool by wtxid.\nNumber of ancestors (including this tx).\nNumber of descendants (including this tx).\nGet descendant feerate.\nDirect conflicts (txs spending same outputs).\nMinimum fee rate in satoshis per KB for a transaction to …\nEnable package relay/CPFP.\nWhether to enable RBF (BIP125).\nBatch-prefetch coins (called at start of validation).\nBest block hash when transaction entered mempool (for …\nMedian Time Past of the best block when transaction …\nBlock height when transaction entered mempool.\nSequence number for replay protection.\nExpire old transactions.\nExpire old transactions.\nGet the expiry duration\nNumber of seconds to keep transactions in the mempool …\nBase fee (without priority adjustments).\nGet transaction feerate (modified fee / vsize).\nTotal fees of ancestors (including this tx).\nTotal fees of descendants (including this tx).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalculate fee rate from amount and vsize with overflow …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreate fee rate from satoshis per kilovirtual byte.\nCreate fee rate from satoshis per virtual byte.\nGet entry by ID (immutable).\nLookup entry ID by txid.\nLookup entry ID by wtxid.\nGet coin with overlay priority.\nGet transaction that spends the given outpoint (conflict …\nGet entry by txid.\nGet fee for given virtual size.\nGet entry by ID (mutable).\nGet transaction from mempool if present.\nCheck if coin exists (for quick lookups without fetching).\nHeight at which transaction becomes valid.\nPosition in randomized transaction vector (for relay).\nInsert a new entry into the arena.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if arena is empty.\nIterate entries sorted by ancestor score (highest fee …\nIterate entries sorted by descendant score (lowest fee …\nIterate entries sorted by entry time (oldest first).\nIterate over all transaction IDs with their fee rates, …\nGet total number of entries.\nLock points for BIP68/BIP112 validation.\nLock points for BIP68/112.\nMark transactions as broadcast.\nGet maximum ancestor size\nGet maximum number of ancestors\nA data carrying output is an unspendable output containing …\nGet maximum descendant size\nGet maximum number of descendants\nHighest block containing an input of this transaction.\nMaximum number of transactions in a package.\nMaximum total virtual size of package in vbytes.\nMaximum number of transactions that can be replaced …\nMaximum script verification cache size\nGet the maximum size of the mempool in bytes\nMaximum size of the mempool in bytes (default: 300 * …\nGet the minimum relay fee rate as FeeRate\nMinimum fee rate in satoshis per KB for a transaction to …\nModified fee (includes priority delta from …\nCreate a new empty arena.\nCreate a new coins view cache.\nCreate new empty mempool inner state.\nCreate a new mempool with default options.\nCreate new mempool options with default values\nUpdate to new block tip.\nGet mempool options.\nParent entries (in-mempool dependencies).\nGet transactions pending broadcast with their fee rates.\nWhether to require standard transactions\nRemove entry from arena.\nRemove conflicts for a set of transactions.\nRemove transactions confirmed in a block.\nRemove transactions that are no longer valid after a reorg.\nRemove mempool transaction’s coins (on …\nRemove transactions and update state.\nTransactions to remove (for coins cache cleanup). Must …\nTotal fees of all replaced transactions.\nTotal size of all replaced transactions.\nWhether to require standard transactions\nCheck if transaction signals RBF per BIP125.\nSignature operation cost.\nSignature operation cost.\nTotal sigop cost of ancestors (including this tx).\nGet total number of transactions.\nGet number of transactions in mempool.\nTotal size of ancestors in virtual bytes (including this …\nTotal size of descendants in virtual bytes (including this …\nMark coin as spent by mempool transaction.\nWhether this transaction spends a coinbase output.\nWhether this transaction spends a coinbase output.\nEntry timestamp (seconds since epoch).\nTime at which transaction becomes valid.\nGet total fees.\nGet total transaction size in bytes.\nGet total size of all transactions in bytes.\nTrim mempool to maximum size by evicting lowest-feerate …\nTrim mempool to maximum size.\nTransaction data.\nCached transaction weight.\nUpdate ancestor state and reindex.\nUpdate descendant state and reindex.\nUpdate modified fee (priority adjustment) and reindex.\nGet transaction virtual size in bytes.\nCreate a new mempool with custom options.")